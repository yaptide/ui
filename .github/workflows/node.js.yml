# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]

# see https://github.community/t/treating-warnings-as-errors-because-process-env-ci-true/18032
env:
    CI: false

jobs:
    build_and_test:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [16.x]
                # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

        steps:
            - uses: actions/checkout@v3
              with:
                submodules: recursive
            - uses: actions/setup-python@v4
              with:
                python-version: '3.10'
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'
            - run: npm ci
            - run: npm run build --if-present
            - run: npm test

    deploy_gh_pages:
        runs-on: ubuntu-latest
        needs: [build_and_test]
        if: github.ref == 'refs/heads/master'

        steps:
            - name: Checkout üõéÔ∏è
              uses: actions/checkout@v3
              with:
                submodules: recursive
            
            - uses: actions/setup-python@v4
              with:
                python-version: '3.10'

            - name: Install üîß
              run: npm install

            - name: webfactory/ssh-agent üñ•Ô∏è
              uses: webfactory/ssh-agent@v0.5.4
              with:
                  # Private SSH key to register in the SSH agent
                  ssh-private-key: ${{ secrets.WEBDEV }}

            - name: Deploy üöÄ
              run: |
                  git remote set-url origin git@github.com:yaptide/web_dev.git
                  npm run deploy -- -u "github-actions-bot <support+actions@github.com>" -r "git@github.com:yaptide/web_dev.git"

    deploy:
        runs-on: ubuntu-latest
        needs: [build_and_test]
        env:
            FRONTEND_HOST: 149.156.182.181
            FRONTEND_USER: ubuntu
        if: github.ref == 'refs/heads/master'

        steps:
            # Get the repo to the github agent
            - name: Checkout üõéÔ∏è
              uses: actions/checkout@v3
              with:
                submodules: recursive

            - uses: actions/setup-python@v4
              with:
                python-version: '3.10'

            # Add keys to the SSH agent
            - uses: webfactory/ssh-agent@v0.5.4
              with:
                  ssh-private-key: |
                      ${{ secrets.DEPLOY_C3_TEST }}

            # Create the known_hosts file with the open stack machines public keys
            - name: Add host to known_hosts üñ•Ô∏è
              run: |
                  mkdir -p ~/.ssh
                  chmod 700 ~/.ssh
                  ssh-keyscan -H ${{ env.FRONTEND_HOST }} >> ~/.ssh/known_hosts

            # Kill docker container, then remove all docker images
            - name: Kill our docker container üíÄ
              continue-on-error: true
              uses: appleboy/ssh-action@v0.1.5
              with:
                  host: ${{ env.FRONTEND_HOST }}
                  username: ${{ env.FRONTEND_USER }}
                  key: ${{ secrets.DEPLOY_C3_TEST }}
                  script: |
                      docker rm --force yaptide-nginx 
                      docker container prune --force

            # Copy the new files form the github agent onto the machine
            - name: Copy files to the machine üìÅ
              run: rsync -a ~/work/ui/ui ${{ env.FRONTEND_USER }}@${{ env.FRONTEND_HOST }}:~/ui --exclude={node_modules,build}

            - name: Build app and run docker container üî® & üöÄ
              uses: appleboy/ssh-action@v0.1.5
              with:
                  host: ${{ env.FRONTEND_HOST }}
                  username: ${{ env.FRONTEND_USER }}
                  key: ${{ secrets.DEPLOY_C3_TEST }}
                  command_timeout: 10m
                  script_stop: true  # stop after first failure
                  script: |
                      cd ui/ui
                      npm install
                      npm run build
                      docker run --name yaptide-nginx -p 8080:80 -v $PWD/build:/usr/share/nginx/html:ro -d nginx
